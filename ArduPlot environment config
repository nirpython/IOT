SITL Simulator (Software in the Loop)

pip install dronekit  --- drone kit
pip install dronekit-sitl  -- Simulator 


Create a python file hello.py

print "Start simulator (SITL)"
import dronekit_sitl
sitl = dronekit_sitl.start_default()
connection_string = sitl.connection_string()

# Import DroneKit-Python
from dronekit import connect, VehicleMode

# Connect to the Vehicle.
print("Connecting to vehicle on: %s" % (connection_string,))
vehicle = connect(connection_string, wait_ready=True)

# Get some vehicle attributes (state)
print "Get some vehicle attribute values:"
print " GPS: %s" % vehicle.gps_0
print " Battery: %s" % vehicle.battery
print " Last Heartbeat: %s" % vehicle.last_heartbeat
print " Is Armable?: %s" % vehicle.is_armable
print " System status: %s" % vehicle.system_status.state
print " Mode: %s" % vehicle.mode.name    # settable

# Close vehicle object before exiting script
vehicle.close()

Run this file as python2.5

You should see the following output from the simulated vehicle:

Start simulator (SITL)
Downloading SITL from http://dronekit-assets.s3.amazonaws.com/sitl/copter/sitl-win-copter-3.3.tar.gz
Extracted.
Connecting to vehicle on: 'tcp:127.0.0.1:5760'
>>> APM:Copter V3.3 (d6053245)
>>> Frame: QUAD
>>> Calibrating barometer
>>> Initialising APM...
>>> barometer calibration complete
>>> GROUND START
Get some vehicle attribute values:
 GPS: GPSInfo:fix=3,num_sat=10
 Battery: Battery:voltage=12.587,current=0.0,level=100
 Last Heartbeat: 0.713999986649
 Is Armable?: False
 System status: STANDBY
 Mode: STABILIZE
Completed

Refrence --------------------------  https://dronekit-python.readthedocs.io/en/latest/guide/quick_start.html

                                                             DroneKit-SITL:
                                                             
                                                             
pip install dronekit-sitl -UI

dronekit-sitl copter

dronekit-sitl plane-3.3.0 --home=-35.363261,149.165230,584,353    \\\  open a browser and 127.0.0.1:5760   

Refrence ----------------------------https://dronekit-python.readthedocs.io/en/latest/develop/sitl_setup.html


                                            Setting up the Build Environment (Linux/Ubuntu):
                                            
                                            
                                            
Ubuntu

Linux/Ubuntu users can install with apt :

        sudo apt-get update
        sudo apt-get install git
        sudo apt-get install gitk git-gui

https://github.com/ArduPilot/ardupilot.git for the main ardupilot repo

cd ardupilot
git submodule update --init --recursive

Install some required packages

If you are on a debian based system (such as Ubuntu or Mint), we provide a script that will do it for you. From ardupilot directory :

Tools/environment_install/install-prereqs-ubuntu.sh -y


Reload the path (log-out and log-in to make permanent):

. ~/.profile


Cleaning

If there have been updates to some git submodules you may need to do a full clean build. To do that use:

./waf clean


export PATH=$PATH:$HOME/ardupilot/Tools/autotest
export PATH=/usr/lib/ccache:$PATH

Then reload your PATH by using the “dot” command in a terminal

. ~/.bashrc

Refrence ----------------------------https://ardupilot.org/dev/docs/building-setup-linux.html#building-setup-linux

                                                  Installing MAVProxy


sudo apt-get install python-pip

Installing necessary packages

Some modules will be, probably, necessary.

sudo apt-get install python-opencv python-wxgtk2.8 python-matplotlib python-numpy python-seri


Updating MAVProxy and pymavlink

New versions of MAVProxy and pymavlink are released quite regularly. If you are a regular SITL user you should update every now and again using this command

pip install --upgrade pymavlink MAVProxy --user

sudo apt-get install flightgear

sim_vehicle.py -L KSFO

cd ardupilot/ArduCopter$ sim_vehicle.py --console --map

Refrence ----------------------------https://ardupilot.org/dev/docs/setting-up-sitl-on-linux.html#setting-up-sitl-on-linux

                                                           Using SITL:
                                                           
                                                           
sim_vehicle.py --help

Selecting a vehicle/frame type

The simulation will default to the vehicle type in the directory in which it is started. You can select the vehicle type if starting from the ardupilot directory by starting the simulator calling sim_vehicle.py with the -v parameter.

sim_vehicle.py -v ArduPlane --console --map


sim_vehicle.py -v ArduPlane -f quadplane --console --map

sim_vehicle.py -v ArduPlane --console --map --osd















































IMPORTENT LINK:
https://stackoverflow.com/questions/29331872/ioerror-errno-13-permission-denied



